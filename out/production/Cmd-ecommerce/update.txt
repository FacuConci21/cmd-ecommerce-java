

    private int updateOption(){

        /*      DECLARATIONS        */
        String[] optionsList = new String[this.productsList.size()];
        String productName, productDescription;
        float productPrice;
        int productStock;
        Product newProductInstance;

        if (optionsList.length == 0){
            System.out.println(Colors.ANSI_RED + "No hay productos para modificar." );
        } else{
            String optionMessage = "Que producto desea modificar?: ";
            Scanner scanner = new Scanner(System.in);

            for(int i = 0; i < this.productsList.size(); i++){
                    optionsList[i] = this.productsList.elementAt(i).getName();
            }

            this.optionsMenu(optionsList, optionMessage);

            /*Request of data to modify*/

            System.out.print(Colors.ANSI_DEFAULT + "Name: "); productName = scanner.next();
            System.out.print(Colors.ANSI_DEFAULT + "Precio: "); productPrice = scanner.nextFloat();
            System.out.print(Colors.ANSI_DEFAULT + "Cant. en Stock: "); productStock = scanner.nextInt();
            System.out.print(Colors.ANSI_DEFAULT + "Description: "); productDescription = scanner.next();


            switch(this.productsList.elementAt(optionSelection - 1).getCategory()){
                case 1: {

                    float beverageLiter;
                    int beveragePercentage;

                    System.out.print(Colors.ANSI_DEFAULT + "Litros: "); beverageLiter = scanner.nextFloat();
                    System.out.print(Colors.ANSI_DEFAULT + "Porcentaje de alcohol: "); beveragePercentage = scanner.nextInt();

                    newProductInstance = new AlcoholicBeverage(this.productsList.elementAt(
                            optionSelection - 1).getId(), optionSelection, productName,
                            productDescription, productPrice, productStock, beverageLiter, beveragePercentage
                    );

                    // Updating product
                    this.productsList.setElementAt(newProductInstance, optionSelection - 1);
                    break;
                }
                case 2: {

                    int dairyFatPercentage;
                    String dairyDateExpiry, dairySingleVitamin;
                    Vector<String> dairyVitamins = new Vector<>();

                    System.out.print(Colors.ANSI_DEFAULT + "Porcentaje de grasa: "); dairyFatPercentage = scanner.nextInt();
                    System.out.print(Colors.ANSI_DEFAULT + "Ingrese las vitaminas: ");

                    for (int i = 0; i < 3; i++) {
                        System.out.print(" "); dairySingleVitamin = scanner.next();
                        dairyVitamins.add(dairySingleVitamin);
                    }
                    do{
                        System.out.print(Colors.ANSI_DEFAULT + "Fecha de caducidad: "); dairyDateExpiry = scanner.next();
                    } while( !Dairy.controlDate(dairyDateExpiry) );

                    newProductInstance = new Dairy(
                            this.productsList.elementAt(optionSelection - 1).getId(),
                            optionSelection,productName, productDescription, productPrice, productStock,
                            dairyFatPercentage,dairyDateExpiry, dairyVitamins
                    );

                    // Updating product
                    this.productsList.setElementAt(newProductInstance, optionSelection - 1);
                    break;
                }
                case 3: {
                    int stiffFatPercentage;
                    String stiffDateExpiry;

                    System.out.print(Colors.ANSI_DEFAULT + "Porcentaje de grasa: "); stiffFatPercentage = scanner.nextInt();
                    do{
                        System.out.print(Colors.ANSI_DEFAULT + "Fecha de caducidad: "); stiffDateExpiry = scanner.next();
                    } while( !Stiff.controlDate(stiffDateExpiry) );

                    newProductInstance = new Stiff(this.productsList.elementAt(optionSelection - 1).getId(),
                            optionSelection, productName, productDescription, productPrice, productStock, stiffDateExpiry,
                            stiffFatPercentage);

                    // Updating product
                    this.productsList.setElementAt(newProductInstance, optionSelection - 1);
                    break;
                }
            }

            System.out.println(Colors.ANSI_BLUE + "Producto: " + productName + " fue modificado correctamente." );
        }

        return 0;
    }